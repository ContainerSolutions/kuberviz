'use strict';

// HOW THIS WORKS
// The svg generated by graphviz  is fetched 10 ms after the previous round succeeded.
//
// The new result is compared with prevSVG to prevent unnecessary redraws.
// If the SVG elements changed, it destroys the SVG zoomer, but not before storing the
// zoom level and panning (x,y coords). The SVG elements are recreated
// and the zoom level and panning is restored.

var prevSVG = null;
var zoomer = null

function hasChanged(newHtml) {
  if (prevSVG == null) {
    prevSVG = newHtml;
    return true;
  }

  if (newHtml == prevSVG) {
    return false;
  } else {
    prevSVG = newHtml;
    return true;
  }
}

function completeRedraw() {
  console.log("tick");
  $.get("/graph.svg", function(data) {
    var svg = $(data.documentElement)

    if (hasChanged(svg.html())) {
      var oldZoomerProps = null;
      if (zoomer) {
        oldZoomerProps = {
          pan:  zoomer.getPan(),
          zoom: zoomer.getZoom()
        };
        zoomer.destroy();
      }

      $("#viz").empty().append(svg);

      zoomer = svgPanZoom('#viz', {
        zoomEnabled: true,
        controlIconsEnabled: true,
        fit: true,
        center: true,
      });

      if (oldZoomerProps != null) {
        zoomer.zoom(oldZoomerProps.zoom)
        zoomer.pan(oldZoomerProps.pan)
      } else {
        // By default, zoom to a sensible default.
        // setTimeout is required to delegate setting
        // the zoom level until the next browser event loop;
        // I suspect that otherwise the zoomer will just overwrite it to 1.
        setTimeout(function() {
          zoomer.zoom(0.5);
        }, 0);
      }
    }

    setTimeout(completeRedraw, 100);
  });
}

$(document).ready(completeRedraw);
